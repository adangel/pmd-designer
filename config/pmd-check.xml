<?xml version="1.0"?>
<ruleset name="pmd-designer-dogfood"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>Rules specific to the UI module.</description>

    <rule ref="net/sourceforge/pmd/pmd-dogfood-config.xml"/>

    <rule ref="category/java/errorprone.xml/CloseResource">
        <properties>
            <property name="violationSuppressRegex">
                <value>.*like this Stream object.*</value>
            </property>
        </properties>
    </rule>


    <rule name="InternalApiUsage"
          language="java"
          since="6.5.0"
          message="This module should not use pmd-core''s internal API"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Injected FXML fields should be suffixed by their type
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ImportDeclaration
                    [ends-with(@ImportedName, 'InternalApiBridge')]
                |
                //ImportDeclaration
                    [starts-with(@PackageName, "net.sourceforge.pmd.") and contains(@PackageName, ".internal")]
                    (: allow PropertyTypeId - the designer is for now the only client. Until then it stays internal,
                       but is used by the designer.
                    :)
                    [@ImportedName != 'net.sourceforge.pmd.properties.internal.PropertyTypeId']
            ]]></value>
            </property>
        </properties>
        <example><![CDATA[
import net.sourceforge.pmd.lang.InternalApiBridge; // violation
import net.sourceforge.pmd.lang.ast.internal.StreamImpl; // violation
import net.sourceforge.pmd.lang.ast.Node; // ok

public class Foo {}
]]></example>
    </rule>

    <!-- FIXME this doesn't work because "fxml" is not part of the patterns for the XML language... -->
    <rule name="FxmlApiVersion"
          language="xml"
          since="6.5.0"
          message='FXML docs for this project should specify an API version of 8: xmlns="http://javafx.com/javafx/8"'
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            FXML docs for this project should specify an API version of 8.
        </description>
        <priority>1</priority>
        <properties>
            <property name="apiVersion" type="String" value="8" description="JavaFX API version to enforce"/>
            <property name="xpath">
                <value><![CDATA[
                //*[starts-with(@xmlns,"http://javafx.com/javafx/") and xmlns != string-join(("http://javafx.com/javafx/", $apiVersion), "")]
            ]]></value>
            </property>
        </properties>
    </rule>


    <rule name="FxIdNamingConvention"
          language="java"
          since="6.5.0"
          message="Injected FXML fields should be suffixed by their type, eg ''HelloButton'', here it''s ''{0}''"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Injected FXML fields should be suffixed by their type
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
//FieldDeclaration[ModifierList/Annotation[pmd-java:typeIs('javafx.fxml.FXML')]]
  /VariableDeclarator/VariableId
    [not(ends-with(@Name, ../../ClassType/@SimpleName))]
    (: The following are the exceptions to the rule :)
    [not(ends-with(@Name, 'Controller') and ends-with(../../ClassType/@SimpleName, 'Controller'))]
    [not(../../ClassType/@SimpleName = 'TextField' and ends-with(@Name, 'Field'))]
    [not(../../ClassType/@SimpleName = 'ToggleButton' and ends-with(@Name, 'Toggle'))]
    [not(../../ClassType/@SimpleName = 'TextArea' or ends-with(../../ClassOrInterfaceType/@SimpleName, 'CodeArea') and ends-with(@Name, 'Area'))]
    [not(../../ClassType/@SimpleName = 'TableColumn' and ends-with(@Name, 'Column'))]
    [not(../../ClassType/@SimpleName = 'MenuItem' and ends-with(@Name, 'Button'))]
    [not(../../ClassType/@SimpleName = 'SyntaxHighlightingCodeArea' and ends-with(@Name, 'Area'))]
    [not(ends-with(../../ClassType/@SimpleName, 'Choicebox') and ends-with(@Name, 'Choicebox'))]
    [not(ends-with(../../ClassType/@SimpleName, 'TitledPane') and ends-with(@Name, 'Pane'))]
    (: This last clause allows variables to be named the same as their type, modulo Camel case :)
    (: Ideally we would only allow this for our custom types, but there's currently no easy :)
    (: way to get the type name of a node to check the package. :)
    (: We should create a function for that, eg typeNameOf :)
    [not(string-length(../../ClassType/@SimpleName) = string-length(@Name)
        and substring(../../ClassType/@SimpleName, 2) = substring(@Name, 2))]
            ]]></value>
            </property>
        </properties>
        <example><![CDATA[
import javafx.fxml.FXML;
import javafx.scene.control.MenuItem;

public class MyController {
    @FXML
    private MenuItem about; // violation

    @FXML
    private MenuItem aboutMenuItem; // ok

    @FXML
    private TextField nameField; // ok, exception

    @FXML
    private MenuItem aboutButton; // ok, exception
}
]]></example>
    </rule>

</ruleset>
